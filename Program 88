#include <stdio.h>

#define MAX 10  // Maximum size of the matrix

// Function to find the determinant of a matrix
int determinant(int matrix[MAX][MAX], int n) {
    int det = 0;
    
    // Base case: If the matrix is 1x1, return the element itself
    if (n == 1) {
        return matrix[0][0];
    }

    // Base case: If the matrix is 2x2, return the determinant (ad - bc)
    if (n == 2) {
        return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0];
    }

    // For larger matrices, use recursion to find the determinant
    int temp[MAX][MAX];  // Temporary matrix to store the cofactors
    for (int p = 0; p < n; p++) {
        int h = 0;  // To store the row index of the cofactor matrix
        int k = 0;  // To store the column index of the cofactor matrix

        // Get the cofactor of matrix[0][p]
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (j != p) {
                    temp[h][k++] = matrix[i][j];
                }
            }
            h++;
            k = 0;
        }

        // Recursively calculate the determinant of the cofactor matrix
        det += (p % 2 == 0 ? 1 : -1) * matrix[0][p] * determinant(temp, n - 1);
    }

    return det;
}

void printMatrix(int matrix[MAX][MAX], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int matrix[MAX][MAX], n;

    // Read the size of the matrix (n x n)
    printf("Enter the size of the matrix (n x n): ");
    scanf("%d", &n);

    // Read matrix elements
    printf("Enter elements of the matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &matrix[i][j]);
        }
    }

    // Display the matrix
    printf("Matrix:\n");
    printMatrix(matrix, n);

    // Find the determinant of the matrix
    int det = determinant(matrix, n);

    // Display the determinant
    printf("Determinant of the matrix: %d\n", det);

    return 0;
}
